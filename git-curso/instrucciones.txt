Se inició el curso de Git de Soy Dalto:
    1. https://www.youtube.com/watch?v=9ZJ-K-zk_Go&list=PLE8uP447fYpiWxfqCnoHZx03zCsUAzDUW&index=46
    2. Introducción a git: es un sistema de control de versiones distribuido    
        2.1. Instalar git: https://git-scm.com/downloads
        2.2. Configuración
            2.2.1. Alcance local: por repositorio                       
                - git config --local user.name
                - git config --local user.email
            2.2.2. Alcance global: por cuenta de usuario                 
                - git config --global user.name
                - git config --global user.email
            2.2.3. Alcance de sistema: para toda la pc, usuarios, etc... 
                - git config --system user.name
                - git config --system user.email
            2.2.4. Se puede ver el listado de configuraciones con: git config --list | git config --global --list
            2.2.5. Configuración del editor de código: git config --global core.editor "code --wait"
            2.2.6. Configuración de las salidas de color: git config --global color.ui true
            2.2.7. Configuración de los saltos de línea: git config --global core.autocrlf
                2.2.7.1. Si estás en windows usa: git config --global core.autocrlf true
                2.2.7.1. Si estás en linux o mac usa: git config --global core.autocrlf input
                2.2.7.1. Windows (\r\n retorno de carro + salto de línea) vs Linux & Mac (\n sálto de línea)
    3. Iniciar o crear un repositorio
        3.1. Abrir una terminal y acceder a la carpeta del proyecto
        3.2. Ejecutar el comando: git init
        3.3. Para ver los documentos ocultos en unix se usa: ls -a
        3.4. Pasar del área de trabajo al stage area: git add .
        3.5. Pasar del stage area al repositorio: git commit -m "Resumen"
        3.6. Si se desea hacer un commit saltando el stage area: git commit -m "Mensaje" -a
    4. Funciones básicas: restore, checkout, reset y mv (rename)
        4.1. Para deshacer cambios
            4.1.1. git checkout archivo (anteriormente)
            4.1.2. git restore archivo (actualmente)
        4.2. Para sacar un archivo del stage area
            4.2.1. git reset --hard (anteriormente)
            4.2.1. git restore --staged archivo (actualmente)
        4.3. Para renombrar un archivo
            4.3.1. git mv archivo-old archivo-new (lo renombra y agrega al stage)
    5. Git diff o diferencias entre: commits, branches, etc...
        5.1. Para ver la información detallada del último commit de un archivo:          git show archivo
        5.2. Para ver la diferencia entre último commit de un archivo y el working area: git diff archivo
        5.3. Para ver la diferencia entre último commit de un archivo y el stage:        git diff --staged
        5.4. Para ver el listado de los commits: git log | git log --oneline (abreviado char(7))
        5.5. Para aumentar el número de caracteres de git log: git config --global core.abbrev 10
        5.6. Para ver diferencias entre commits: git log --oneline -> git diff hash1 hash2
        5.7. Para ver solo los archivos que cambiaron: git log --oneline -> git diff --name-only hash1 hash2
        5.8. Para ver solo las líneas que cambiaron:   git log --oneline -> git diff --word-diff hash1 hash2
            5.8.1. Entre el último commit y el stage area: git diff --word-diff --staged
    6. Modificar commits, hacer cambios sin necesitad de hacer otro commit
        6.1. Modificar descripción y agregar archivos: git commit --amend
        6.2. Hacer push de un commit modificado: git push -f
        6.3. ¿Qué es el HEAD?
            6.3.1 El HEAD es el puntero que indica en qué commit está posicionado y en qué rama
        6.4. Para modificar un commit que no es el último no se puede usar --amend
            6.4.1. Modificar un commit que no es el último: git rebase -i head~x (alt + 126 = ~)
            6.4.2. Modificar un commit 3 posiciones abajo:  git rebase -i head~3
            6.4.3. Cambiar pick por edit en el commit correspondiente
            6.4.4. Ejecutar git commit --amend y hacer los cambios correspondientes
            6.4.5. Ejecutar git rebase --continue (práctica no recomendada)
    7. Deshacer commits
        7.1. Para ver los últimos 5 commits: git log --oneline -n 5
        7.2. Para deshacer el último commit se lleva el puntero al commit anterior: git reset --soft hash 
        (los cambios del último commit los agrega al stage) | git reset --soft head~1 (mismo efecto)
        7.3. Para deshacer el último commit y dejar los cambios en el working area: git reset --mixed hash
        (los cambios del último commit no los agrega al stage) | git reset --mixed head~1
        7.4. Para deshacer completamente el último commit y restaurar el anterior: git reset --hard hash
        (restaura el commit al que se apunta y limpia el stage) | git reset --hard head~1
        7.5. Para deshacer todos los cambios sin guardar se puede usar: git reset --hard último-commit
    6. Se quedó en el minuto 1:31:36